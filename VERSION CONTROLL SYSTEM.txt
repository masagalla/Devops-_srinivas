VERSION CONTROLL SYSTEM:
-----------------------

## why need version control system 

 --> collaborating 
 --> storing version 
 --> figuring out what happened 
 --> backup 

## what is version control
----------------------------

   version control is a system that documents changes made to be file or set of files .
   it allows multiple users to manage multiple revisions of the same unit of information.
   it is a snapshot of your project over time 

## version control types 

    @ 1.local version control (LVC) :
        
         --> the practice of having the version database in the local machine 
            
            issues: multiple people working on the same project and local machine crashed we loosed the entire code  
        
            solution : centralized version control  


   @ 2. centralized version control (cvc):
       
         --> local version control's issues are resolved by centralized version control 
         --> in cvc , a central repository is maintain where all the versioned files are kept 
         --> now users can checkout and check in files from their different computers at any time 

          issue: in case of central server failure whole system goes down 

          solution : Distributed version control 
   
   @ 3.Distributed version Control system (DVCS)

         --> version database is stored at every users local system and at the remote server 
         --> users manipulates the local fields and then upload the changes to the remote 
         --> if any of the servers die a client server can be used to restore 



 ## INTRODUCTION TO GIT:


       git is an open source distributed version control system (DVCS) which records changes 
       made to the fields lying employees on the speed ,data integrity and distributed ,
       non-linear workflows 


##GIT FILE WORK FLOW 

       	the remote is the server where all the collaborates uploaded changes made to the fieles

      @ local repository
 
         --> local repository is users copy of the version control database 
         --> the users accesses all the files than local repository and push the change made to the local repository 

      @ work space
 
        --> work space is users active directory 
        --> the users modified existing fields and create the new files in this space 
            git track this changes compared to your local repository 

      @ staging Area/ index Area 
       
         --> stage area is a place whare all the modified files marked to be committed are placed 

##COMMANDS
----------
  1. Clone 
 
       clone is command creates a copy of an existing remote repository inside the local repository 
  
  2. add
       add is a command which add the files from work space to staging area  
  
  3. commit
  
       commit command commits all the changes made in the staging area to local repository 
  
  4. push 

       push command pushes all the changes made in the local repository to the remote repository 
  
  5. fetch 

      fetch command collets the changes made in the remote repository and copies them to local repository  
      this command does not affect our workspace 
 
 6 pull

     pull like fetch , gets all the changes from the remote repository and copies them to local repository .
     pull merges those changes to the current working direction 


7 git init
     initializes a new Git repository. It creates a .git directory in your project, allowing you to track changes, commits, and manage version 
     control for your project. This is the first step in starting a new repository in Git.
          
8 git config --global user.name "username" : 
       command sets your name for all commits across all Git repositories on your machine(To know who did what)



9. git config --global user.email "emailid" : command sets your email address for all commits across all repositories on your machine



10. git config --global user.name : To check the users


11. git config --global user.mail : To check the users email id's


12. git config --global --list : To check all the users and mails
     
13. git log..... 
    command is used to view the commit history in a Git repository. It shows a list of past commits, including details like commit hash, author, 
    date, and commit message.

14.git log --oneline
      
       actually  commit id consist of 40 characters in the aplhanumeric but

       this  command is used to display the commit history in a simplified, one-line format,

        Command displays the commit id in the short(7 digits)
 
15.git diff "commit id"

        this command it will show the difference bwtween two commit id's
        
         how can we use git diff command

         1.  git diff  for ( Compare Unstaged Changes (Working Directory vs. Last Commit):)
         2.  git diff --staged for  (Compare Staged Changes (Staging Area vs. Last Commit):)
         3.  git diff <commit1> <commit2> for (Compare Two Commits:)
         4.  git diff <commitID>  for (Compare a Commit with the Working Directory)
         5.  git diff <file-name> for (Compare Files)

 16. git branch : 
           command list all the branches and mainly it shows which branch you are in
 
 17. git branch "branch-name" : 
           command used to create a new branch

 18. git checkout -b "branch-name" : 
           Command used to create a branch and switch to new branch


19. git checkout "branch-name" : 
           command used to switch one branch to another.


20. git branch -m(move) oldbranch newbranch : command used to rename branch existing name


21. git branch -d branch-name : command used to delete a branch


22. git branch -D branch-name : command used to delete a branch forcefully (if we want to deleting a branch we can come out from on branch)

23.git revert "commit-id"  mainpurpose is undo  

           In simple terms, git revert is used to undo changes made by a specific commit. Instead of deleting the commit, it adds a new commit 
           that reverses the effects of the original one, keeping the project history safe and intact.
     
        how can we use git revert command 

          1. git revert <commitID> for (Revert a Specific Commit:)
          2.git revert <commitID1> <commitID2> for (revert multiple commits )
          3.git revert <oldest-commitID>^..<newest-commitID> for (Revert a Range of Commits:)






        
           
